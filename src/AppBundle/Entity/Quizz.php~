<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Quizz
 *
 * @ORM\Table(name="quizz")
 * @ORM\Entity(repositoryClass="AppBundle\Entity\QuizzRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Quizz
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="text")
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text", nullable=true)
     */
    private $description;

    /**
     * @var string
     *
     * @ORM\Column(name="giftText", type="text", nullable=true)
     */
    private $giftText;

    /**
     * @var string $giftImg
     * @Assert\Image( maxSize = "1024k", mimeTypesMessage = "Merci de fournir une image valide")
     * @ORM\Column(name="giftImg", type="string", length=255, nullable=true)
     */
    private $giftImg;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateStart", type="datetime")
     */
    private $dateStart;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateEnd", type="datetime")
     */
    private $dateEnd;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateAdd", type="datetime")
     */
    private $dateAdd;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateUpd", type="datetime")
     */
    private $dateUpd;

    /**
     * @var boolean
     *
     * @ORM\Column(name="active", type="boolean")
     */
    private $active;

	/**
	 * @var boolean
	 *
	 * @ORM\Column(name="startNotified", type="boolean")
	 */
	private $startNotified;

	/**
	 * @var boolean
	 *
	 * @ORM\Column(name="endNotified", type="boolean")
	 */
	private $endNotified;

	/**
	 * @ORM\OneToMany(targetEntity="AppBundle\Entity\Question", mappedBy="quizz", cascade={"persist"})
	 */
	private $questions;

	/**
	 * @ORM\OneToMany(targetEntity="AppBundle\Entity\Resultat", mappedBy="quizz", cascade={"persist"})
	 */
	private $resultats;

	function __construct()
	{
		$this->active  = true;
		$this->dateUpd = new \DateTime();
		$this->dateAdd = new \DateTime();
		$this->giftImg = null;
	}

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Quizz
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string 
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Quizz
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set giftText
     *
     * @param string $giftText
     * @return Quizz
     */
    public function setGiftText($giftText)
    {
        $this->giftText = $giftText;

        return $this;
    }

    /**
     * Get giftText
     *
     * @return string 
     */
    public function getGiftText()
    {
        return $this->giftText;
    }

    /**
     * Set dateStart
     *
     * @param \DateTime $dateStart
     * @return Quizz
     */
    public function setDateStart($dateStart)
    {
        $this->dateStart = $dateStart;

        return $this;
    }

    /**
     * Get dateStart
     *
     * @return \DateTime 
     */
    public function getDateStart()
    {
        return $this->dateStart;
    }

    /**
     * Set dateEnd
     *
     * @param \DateTime $dateEnd
     * @return Quizz
     */
    public function setDateEnd($dateEnd)
    {
        $this->dateEnd = $dateEnd;

        return $this;
    }

    /**
     * Get dateEnd
     *
     * @return \DateTime 
     */
    public function getDateEnd()
    {
        return $this->dateEnd;
    }

    /**
     * Set dateAdd
     *
     * @param \DateTime $dateAdd
     * @return Quizz
     */
    public function setDateAdd($dateAdd)
    {
        $this->dateAdd = $dateAdd;

        return $this;
    }

    /**
     * Get dateAdd
     *
     * @return \DateTime 
     */
    public function getDateAdd()
    {
        return $this->dateAdd;
    }

    /**
     * Set dateUpd
     *
     * @param \DateTime $dateUpd
     * @return Quizz
     */
    public function setDateUpd($dateUpd)
    {
        $this->dateUpd = $dateUpd;

        return $this;
    }

    /**
     * Get dateUpd
     *
     * @return \DateTime 
     */
    public function getDateUpd()
    {
        return $this->dateUpd;
    }

    /**
     * Set active
     *
     * @param boolean $active
     * @return Quizz
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean 
     */
    public function getActive()
    {
        return $this->active;
    }

	/**
	 * Set giftImg
	 *
	 * @param string $giftImg
	 *
	 * @return Quizz
	 */
	public function setGiftImg($giftImg)
	{
		$this->giftImg = $giftImg;

		return $this;
	}

	/**
	 * Get giftImg
	 *
	 * @return string
	 */
	public function getGiftImg()
	{
		return $this->giftImg;
	}

	public function getFullImagePath()
	{
		return null === $this->giftImg ? null : $this->getUploadRootDir() . $this->giftImg;
	}

	public function getWebPath()
	{
		return null === $this->giftImg ? null : $this->getUploadDir().'/'.$this->giftImg;
	}

	protected function getUploadDir()
	{
		return 'upload/quizz/'.$this->getId();
	}

	protected function getUploadRootDir() {
		// the absolute directory path where uploaded documents should be saved
		return $this->getTmpUploadRootDir().$this->getId()."/";
	}

	protected function getTmpUploadRootDir() {
		// the absolute directory path where uploaded documents should be saved
		return realpath('./') . '/upload/quizz/';
	}

	/**
	 * @ORM\PrePersist()
	 * @ORM\PreUpdate()
	 */
	public function uploadImage() {
		// the file property can be empty if the field is not required
		$img = $this->giftImg;

		if ( null !== $img && $img instanceof UploadedFile && file_exists( $img->getPathname() ) && $img->getPath() != $this->getUploadRootDir())
		{
			if ( ! $this->id )
			{
				$img->move( $this->getTmpUploadRootDir(), $img->getFilename() . "." . $img->getClientOriginalExtension() );
			}
			else
			{
				if ( ! is_dir( $this->getUploadRootDir() ) )
				{
					mkdir( $this->getUploadRootDir() );
				}
				$img->move( $this->getUploadRootDir(), $img->getFilename() . "." . $img->getClientOriginalExtension() );
			}
			$this->setGiftImg( $img->getFilename() . "." . $img->getClientOriginalExtension() );
		}

	}

	/**
	 * @ORM\PostPersist()
	 * @ORM\PostUpdate()
	 */
	public function moveImage()
	{
		if ( null !== $this->giftImg && file_exists( $this->getTmpUploadRootDir() . $this->giftImg))
		{
			if ( ! is_dir( $this->getUploadRootDir() ) )
			{
				mkdir( $this->getUploadRootDir() );
			}

			copy( $this->getTmpUploadRootDir() . $this->giftImg, $this->getFullImagePath( ) );
			unlink( $this->getTmpUploadRootDir() . $this->giftImg );
		}
	}

	/**
	 * @ORM\PreRemove()
	 */
	public function removeImage()
	{
		if(file_exists($this->getFullImagePath()))
			unlink($this->getFullImagePath());
		if(is_dir($this->getUploadRootDir()))
			rmdir($this->getUploadRootDir());
	}

    /**
     * Get questions
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getQuestions()
    {
        return $this->questions;
    }

    /**
     * Add questions
     *
     * @param \AppBundle\Entity\Question $questions
     * @return Quizz
     */
    public function addQuestion(\AppBundle\Entity\Question $questions)
    {
        $this->questions[] = $questions;

        return $this;
    }

    /**
     * Remove questions
     *
     * @param \AppBundle\Entity\Question $questions
     */
    public function removeQuestion(\AppBundle\Entity\Question $questions)
    {
        $this->questions->removeElement($questions);
    }

    /**
     * Add resultats
     *
     * @param \AppBundle\Entity\Resultat $resultats
     * @return Quizz
     */
    public function addResultat(\AppBundle\Entity\Resultat $resultats)
    {
        $this->resultats[] = $resultats;

        return $this;
    }

    /**
     * Remove resultats
     *
     * @param \AppBundle\Entity\Resultat $resultats
     */
    public function removeResultat(\AppBundle\Entity\Resultat $resultats)
    {
        $this->resultats->removeElement($resultats);
    }

    /**
     * Get resultats
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getResultats()
    {
        return $this->resultats;
    }
}
